// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  output        = "../node_modules/.prisma/client"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement()) @map("user_id")
  name      String
  email     String   @unique
  cpf       String   @unique
  birthDate DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  password  String

  // Relações com Account
  accounts Account[]

  @@map("users")
}

model Account {
  id                 String      @id @default(uuid())
  active             Boolean     @default(true)
  balance            Float       @default(0)
  type               AccountType
  createdAt          DateTime    @default(now())
  updatedAt          DateTime    @updatedAt
  pendingTransaction Boolean     @default(false)

  // Relações com Transaction
  sentTransactions     Transaction[] @relation("FromAccount")
  receivedTransactions Transaction[] @relation("ToAccount")
  User                 User?         @relation(fields: [userId], references: [id])
  userId               Int?

  @@map("accounts")
}

enum AccountType {
  current_account
  investment_account
}

model Transaction {
  id            String          @id @default(uuid())
  fromAccountId String?
  toAccountId   String?
  amount        Float
  type          TransactionType
  description   String?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt

  // Relações com Account
  fromAccount Account? @relation("FromAccount", fields: [fromAccountId], references: [id])
  toAccount   Account? @relation("ToAccount", fields: [toAccountId], references: [id])

  @@map("transactions")
}

enum TransactionType {
  internal
  external
  asset_purchase
  asset_sale
}

model Stock {
  id             String   @id
  name           String
  sector         String
  currentPrice   Float
  dailyVariation Float
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relações com StockHistory
  StockHistory StockHistory[]

  @@map("stocks")
}

model StockHistory {
  id        String   @id @default(cuid())
  stockId   String
  price     Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relações com Asset
  asset Stock @relation(fields: [stockId], references: [id], onDelete: Cascade)

  @@index([stockId, createdAt])
  @@map("stock_history")
}

model FixedIncome {
  id                String   @id
  name              String
  type              String
  rate              Float
  rateType          String
  maturity          DateTime
  minimumInvestment Float
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@map("fixed_incomes")
}

enum FixedIncomeType {
  cdb
  tesouro_direto
}

enum FixedIncomeRateType {
  pre
  pos
}
